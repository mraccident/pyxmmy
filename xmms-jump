#!/usr/bin/python

import xmmsclient
import sys
import os

from PyQt4.QtCore import *
from PyQt4.QtGui import *

from pyxmmy import *



#==============================================================================
# Prettyful stylesheet for main window
#==============================================================================
stylesheet = '''
    QWidget:window {
        border-radius:6px;
        background-color: rgba(16,16,16,85%);
    }
    QLabel {
        color: rgb(200,200,200);
    }
    QLineEdit, QPushButton, QListWidget {
        background: transparent;
        color: white;
        font-size: 16px;
        border: 1px solid rgb(64,64,64);
        border-radius: 3px;
    }
    QLineEdit {
        min-height: 2em;
    }
    QPushButton {
        min-height: 2em;
    }
    QPushButton:hover {
        background-color: rgba(64,64,64,80%);
    }
    QPushButton:pressed {
        background-color: rgba(128,128,128,50%);
    }
'''

#==============================================================================
# Main window class
#==============================================================================
class Window(QWidget):
    def __init__(self):
        QWidget.__init__(self)

        # Initialize layout
        layout = QVBoxLayout(self)
        self.setLayout(layout)

        # Add search bar with label and line edit box
        searchbar = QHBoxLayout()
        layout.addLayout(searchbar)
        self.edit = QLineEdit()
        searchbar.addWidget(QLabel("Search:"))
        searchbar.addWidget(self.edit)

        # Add list pane for search results
        self.list = QListWidget()
        layout.addWidget(self.list)

        # Temp: add a close button
        close = QPushButton('x')
        close.setFixedWidth(32)
        QObject.connect(close, SIGNAL('clicked()'), self.close)
        searchbar.addWidget(close)

        # Size and center window
        self.resize(500, 320)
        screen = QDesktopWidget().screenGeometry()
        self.move((screen.width()/2) - (self.frameSize().width()/2),
                  (screen.height()/2) - (self.frameSize().height()/2))

        # Test
        xmms = Pyxmmy('pyxmmy-jump')
        song = xmms.currentSong()
        self.edit.setText(song.title)


    def focusOutEvent(self, event):
        print "Focus out!"

    #
    # Close the window if the user presses ESC
    #
    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.close()

    def closeEvent(self, event):
        # This is a workaround, since QApplication does not automatically quit
        # when the only window we opened had the Popup flag
        QApplication.quit()

    #
    # Paint sexy window
    #
    def paintEvent(self, event):
        QWidget.paintEvent(self, event)

        # Paint background according to stylesheet
        opt = QStyleOption()
        opt.init(self)
        p = QPainter(self)
        self.style().drawPrimitive(QStyle.PE_Widget, opt, p, self)
        p.end()


#==============================================================================
# Application class
#==============================================================================
class App(QApplication):
    def __init__(self, *args):
        QApplication.__init__(self, *args)

        # Listen for focus changing
        QObject.connect(self, SIGNAL("focusChanged(QWidget *, QWidget *)"), self.focusChanged)

        # Create main window
        self.window = Window()

        # Monkey with transparency and frame depending on style options
        self.setStyleSheet(stylesheet)
        self.window.setAttribute(Qt.WA_TranslucentBackground, True)
        self.window.setWindowFlags(Qt.FramelessWindowHint | Qt.Popup)

        self.window.edit.setFocus()
        self.window.show()

    def focusChanged(self, old, new):
        self.window.activateWindow()
        if new == None:
            self.exit()


if __name__ == '__main__':
    app = App(sys.argv)
    sys.exit(app.exec_())

    print "Exiting..."

